/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */

// Apply the application plugin to add support for building an application
apply plugin: 'application'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.squareup:javapoet:1.9.0'
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    def junitJupiterVersion = '5.2.0'
    // 公式ページがtestCompileとtestRuntimeだったので
    // https://junit.org/junit5/docs/current/user-guide/#running-tests-build
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    implementation 'com.intellij:annotations:+@jar'
//    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation 'com.google.code.gson:gson:2.8.2'

    def branch_name = 'master'
    implementation('com.github.guignol.swing:library') {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
        version {
            branch = branch_name
        }
    }
    implementation('com.github.guignol.swing:processor') {
        version {
            branch = branch_name
        }
    }

    // https://mvnrepository.com/artifact/io.netty/netty-all
    implementation group: 'io.netty', name: 'netty-all', version: '4.0.4.Final'
}

def generatedPath = Paths.get(projectDir.toString(), 'generated', 'source')

compileJava {
    // Change the default location for annotation processor generated sources to a source directory #4956
    // https://github.com/gradle/gradle/issues/4956
    options.annotationProcessorGeneratedSourcesDirectory = generatedPath.toFile()
}

apply from: 'ram.gradle'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Define the main class for the application
def packageName = 'com.github.guignol.indrah'
mainClassName = packageName + '.Main'

group 'app'
version '1.0-SNAPSHOT'

// https://github.com/square/javapoet
// https://android.googlesource.com/platform/tools/build/+/master/builder/src/main/java/com/android/builder/compiling/BuildConfigGenerator.java
// https://qiita.com/opengl-8080/items/87f850c6b2467ad4da32
import com.squareup.javapoet.ArrayTypeName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeSpec

import javax.lang.model.element.Modifier
import java.nio.file.Paths
import java.util.stream.Collectors

// srcDirに追加
sourceSets.main.java.srcDir generatedPath.toString()

afterEvaluate {
    generateJavaFile(packageName, 'BuildConfig',
            [
                    stringField('project', rootProject.name)
            ])
            .writeTo(generatedPath)
}

static def stringArrayField(final String name, def values) {
    def arrayInit = values.stream().collect(Collectors.joining('\",\"', '{\"', '\"}'))
    def arrayType = ArrayTypeName.of(String.class)
    FieldSpec.builder(arrayType, name)
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
            .initializer('new $1T $2L', arrayType, arrayInit)
            .build()
}

static def stringField(final String name, final String value) {
    FieldSpec.builder(String, name)
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
            .initializer('$S', value)
            .build()
}

static def generateJavaFile(final String packageName,
                            final String className,
                            final List<FieldSpec> fieldSpecs) {
    def typeSpecBuilder = TypeSpec.classBuilder(className)
            .addJavadoc('Automatically generated file. DO NOT MODIFY\n')
            .addModifiers(Modifier.PUBLIC, Modifier.FINAL)

    fieldSpecs.forEach {
        typeSpecBuilder.addField(it)
    }
    return JavaFile.builder(packageName, typeSpecBuilder.build()).build()
}

run.dependsOn ':rebase-proxy:installDist'